name: Pipeline
run-name: ${{ github.ref }} on ${{ github.repository }} is being built and tested out Github actions
on:
    push:
        branches:
            - "main"
jobs:
    Pipeline-Ubuntu:
        strategy:
            fail-fast: false
            matrix:
                compiler: ["gcc", "clang"]
                config: ["Debug", "Release"]
                build_shared: [0, 1]
                include: 
                  - compiler: "gcc"
                    C: gcc
                    CXX: g++
                  - compiler: "clang"
                    C: clang
                    CXX: clang++
        runs-on: ubuntu-latest
        steps:
            - name: build onwith compiler is ${{ matrix.compiler }} and BUILD_SHARED_LIBS=${{ matrix.build_shared }} in config=${{ matrix.config }}
              run: echo "information os=ubuntu-latest compiler=${{ matrix.compiler }} build_shared=${{ matrix.build_shared }} config=${{ matrix.config }}"
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Generate project for Unix makefile
              env:
                CC: ${{ matrix.compiler.C }}
                CXX: ${{ matrix.compiler.CXX }}
              run: cmake -S ./ -B ./build -DRUN_TEST=1 -DBUILD_SHARED_LIBS=${{ matrix.build_shared }} -G "Unix Makefiles"
            - name: Build project
              run: cmake --build build --config ${{ matrix.config }}
            - name: Run test
              run: ctest -j10 -C ${{ matrix.config }} -T test
              working-directory: ./build
            - name: Upload test result
              uses: actions/upload-artifact@v4
              with:
                name: test-results-ubuntu-${{matrix.compiler}}-${{ matrix.config }}-${{ matrix.build_shared }}.xml
                path: build/test/TestResult/XML_Report.xml

    Pipeline-Windows:
        strategy:
            fail-fast: false
            matrix:
                compiler: ["MSVC", "gcc", "clang"]
                config: ["Debug", "Release"]
                build_shared: [0, 1]
                include: 
                    - compiler: "gcc"
                      C: gcc
                      CXX: g++
                    - compiler: "clang"
                      C: clang-cl
                      CXX: clang-cl
        runs-on: windows-latest
        steps:
            - name: build onwith compiler is ${{ matrix.compiler }} and BUILD_SHARED_LIBS=${{ matrix.build_shared }} in config=${{ matrix.config }}
              run: echo "information os=ubuntu-latest compiler=${{ matrix.compiler }} build_shared=${{ matrix.build_shared }} config=${{ matrix.config }}"
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Generate project for Unix makefile
              env:
                CC: ${{ matrix.compiler.C }}
                CXX: ${{ matrix.compiler.CXX }}
              if: ${{ matrix.compiler != 'MSVC' }}
              run: cmake -S ./ -B ./build -DRUN_TEST=1 -DBUILD_SHARED_LIBS=${{ matrix.build_shared }} -G "Unix Makefiles"
            - name: Generate project for Visual Studio
              if: ${{ matrix.compiler == 'MSVC' }}
              run: cmake -S ./ -B ./build -DRUN_TEST=1 -DBUILD_SHARED_LIBS=${{ matrix.build_shared }}
            - name: Build project
              run: cmake --build build --config ${{ matrix.config }}
            - name: Run test
              run: ctest -j10 -C ${{ matrix.config }} -T test
              working-directory: ./build
            - name: Upload test result
              uses: actions/upload-artifact@v4
              with:
                name: test-results-window-${{matrix.compiler}}-${{ matrix.config }}-${{ matrix.build_shared }}.xml
                path: build/test/TestResult/XML_Report.xml
    Generate-Docs:
      runs-on: "ubuntu-latest"
      needs: [Pipeline-Ubuntu, Pipeline-Windows]
      steps:
        - name: install doxygen and graphviz
          run: sudo apt-get -y install doxygen graphviz
        - name: Check out the repository code
          uses: actions/checkout@v4
        - name: build documents
          run: cmake -S ./ -B ./build -DBUILD_DOCS=1 && cmake --build ./build --target LibraryDocs
        - name: Setup Pages
          uses: actions/configure-pages@v4
        - name: Upload artifact
          uses: actions/upload-pages-artifact@v3
          with:
            # Upload dist folder
            path: './build/docs/html'
        - name: Deploy to GitHub Pages
          id: deployment
          uses: actions/deploy-pages@v4
